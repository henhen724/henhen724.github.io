import { Issuer } from 'openid-client'
import config from './config'

interface SDKInstance {
  config: SDKConfig
  configured: boolean
  client: any
  tokens: any
}

interface SDKConfig {
  clientId: string
  clientSecret: string
  scope: string
  maxRetries: number
}

export const instance: SDKInstance = {
  config: null,
  configured: false,
  client: null,
  tokens: null
}

export async function configure(sdkConfig: SDKConfig) {

  Issuer.defaultHttpOptions = { timeout: 5000 }

  if (!sdkConfig) {
    throw new Error('No SDK configuraton provided')
  }

  instance.config = sdkConfig
  sdkConfig.maxRetries = Number.isInteger(sdkConfig.maxRetries) || config.maxRetries

  let scoutIssuer = await Issuer.discover(config.baseUri)

  instance.client = new scoutIssuer.Client({
    client_id: sdkConfig.clientId,
    client_secret: sdkConfig.clientSecret,
  })

  await authorize()
}

export async function authorize() {
  if (!instance.client) {
    throw new Error('Authorize called but client is not configured.')
  }
  instance.tokens = await instance.client.grant({
    scope: instance.config.scope,
    grant_type: 'client_credentials'
  })
}

export function getAccessToken(): string {
  return instance.tokens ? instance.tokens.access_token : null
}

export function getConfig () {
  return instance.config
}
