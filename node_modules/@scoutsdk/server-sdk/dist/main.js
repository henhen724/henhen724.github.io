"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var openid_client_1 = require("openid-client");
var config_1 = require("./config");
exports.instance = {
    config: null,
    configured: false,
    client: null,
    tokens: null
};
function configure(sdkConfig) {
    return __awaiter(this, void 0, void 0, function () {
        var scoutIssuer;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    openid_client_1.Issuer.defaultHttpOptions = { timeout: 5000 };
                    if (!sdkConfig) {
                        throw new Error('No SDK configuraton provided');
                    }
                    exports.instance.config = sdkConfig;
                    sdkConfig.maxRetries = Number.isInteger(sdkConfig.maxRetries) || config_1.default.maxRetries;
                    return [4 /*yield*/, openid_client_1.Issuer.discover(config_1.default.baseUri)];
                case 1:
                    scoutIssuer = _a.sent();
                    exports.instance.client = new scoutIssuer.Client({
                        client_id: sdkConfig.clientId,
                        client_secret: sdkConfig.clientSecret,
                    });
                    return [4 /*yield*/, authorize()];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.configure = configure;
function authorize() {
    return __awaiter(this, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!exports.instance.client) {
                        throw new Error('Authorize called but client is not configured.');
                    }
                    _a = exports.instance;
                    return [4 /*yield*/, exports.instance.client.grant({
                            scope: exports.instance.config.scope,
                            grant_type: 'client_credentials'
                        })];
                case 1:
                    _a.tokens = _b.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.authorize = authorize;
function getAccessToken() {
    return exports.instance.tokens ? exports.instance.tokens.access_token : null;
}
exports.getAccessToken = getAccessToken;
function getConfig() {
    return exports.instance.config;
}
exports.getConfig = getConfig;
