"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var node_fetch_1 = require("node-fetch");
var main_1 = require("./main");
var config_1 = require("./config");
var ScoutSubscription_1 = require("./ScoutSubscription");
var subscriptions_transport_ws_1 = require("subscriptions-transport-ws");
var ws = require("ws");
var delayPromise_1 = require("./utilities/delayPromise");
var subscriptionsClient = null;
function normalizeHeaders(headers) {
    var normalized = new node_fetch_1.Headers();
    if (!headers) {
        return normalized;
    }
    if (headers instanceof node_fetch_1.Headers) {
        headers.forEach(function (value, name) { return normalized.append(name, value); });
    }
    else if (Array.isArray(headers)) {
        headers.forEach(function (header) {
            var parts = header.split(':', 2);
            normalized.set(parts[0].trim(), parts[1].trim());
        });
    }
    else {
        Object.keys(headers).forEach(function (headerName) { return normalized.set(headerName, headers[headerName]); });
    }
    return normalized;
}
function signedFetch(url, options) {
    return __awaiter(this, void 0, void 0, function () {
        var accessToken, clientId, headers;
        return __generator(this, function (_a) {
            accessToken = main_1.getAccessToken();
            clientId = main_1.getConfig().clientId;
            options = (options || {});
            headers = normalizeHeaders(options.headers);
            headers.set('Authorization', "Bearer " + accessToken);
            if (clientId) {
                headers.set('Scout-App', clientId);
            }
            options.headers = headers;
            return [2 /*return*/, node_fetch_1.default(url, options)];
        });
    });
}
exports.signedFetch = signedFetch;
function performGraphQuery(query, variables, extract, language, retries) {
    if (variables === void 0) { variables = {}; }
    if (extract === void 0) { extract = (function (d) { return d; }); }
    if (language === void 0) { language = 'en-US'; }
    if (retries === void 0) { retries = 0; }
    return __awaiter(this, void 0, void 0, function () {
        var url, response, e_1, json, firstError, err, err;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (retries > main_1.instance.config.maxRetries) {
                        throw new Error('Max retries exceeded');
                    }
                    url = config_1.default.baseUri + "/graph";
                    response = null;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 5]);
                    return [4 /*yield*/, signedFetch(url, {
                            method: 'POST',
                            body: JSON.stringify({
                                query: query,
                                variables: variables || {}
                            }),
                            headers: {
                                'Accept': "application/com.scoutsdk.graph+json; version=" + config_1.default.graphVersion + "; charset=utf8",
                                'Accept-Language': language,
                                'Content-Type': 'application/json'
                            }
                        })];
                case 2:
                    response = _a.sent();
                    return [3 /*break*/, 5];
                case 3:
                    e_1 = _a.sent();
                    return [4 /*yield*/, delayPromise_1.delayPromise(Math.pow(2, Math.min(retries, 4)) * 1000)];
                case 4:
                    _a.sent();
                    return [2 /*return*/, performGraphQuery(query, variables, extract, language, ++retries)];
                case 5:
                    if (!(response.status === 401)) return [3 /*break*/, 7];
                    return [4 /*yield*/, main_1.authorize()];
                case 6:
                    _a.sent();
                    return [2 /*return*/, performGraphQuery(query, variables, extract, language, ++retries)];
                case 7: return [4 /*yield*/, response.json()];
                case 8:
                    json = _a.sent();
                    if (json.data && (!json.errors || json.errors.length === 0)) {
                        return [2 /*return*/, extract ? extract(json.data) : json.data];
                    }
                    else if (json.errors && json.errors.length > 0) {
                        firstError = json.errors[0];
                        err = new Error(firstError.message);
                        err.errors = json.errors;
                        err.reason = firstError.data ? firstError.data.reason : 'UNKNOWN';
                        throw err;
                    }
                    else {
                        err = new Error("Unknown error occurred");
                        err.errors = [];
                        err.reason = 'UNKNOWN';
                        throw err;
                    }
                    return [2 /*return*/];
            }
        });
    });
}
function graphQuery(query, variables, extract, language) {
    if (variables === void 0) { variables = {}; }
    if (extract === void 0) { extract = (function (d) { return d; }); }
    if (language === void 0) { language = 'en-US'; }
    return performGraphQuery(query, variables, extract, language);
}
exports.graphQuery = graphQuery;
function graphSubscription(query, variables, extract, language) {
    if (variables === void 0) { variables = {}; }
    if (extract === void 0) { extract = (function (d) { return d; }); }
    if (language === void 0) { language = 'en-US'; }
    var accessToken = main_1.getAccessToken();
    // Set up the subscriptions client using the ws websocket implelementation if it doesn't already exist
    if (!subscriptionsClient) {
        subscriptionsClient = new subscriptions_transport_ws_1.SubscriptionClient(config_1.default.baseUri + "/graph?access_token=" + accessToken + "&version=" + config_1.default.graphVersion, {
            reconnect: true
        }, ws);
    }
    // Create a subscription request (do not execute it yet, though)
    var request = subscriptionsClient.request({
        query: "subscription " + query,
        variables: variables,
        language: language
    });
    // Set up and execute the manager for this subscription
    var subscription = new ScoutSubscription_1.ScoutSubscription(request, extract);
    // Initialize the subscription with the most recent data
    // (so the user doesn't have to wait until the data changes)
    graphQuery(query, variables, extract, language)
        .then(function (data) { return subscription.emit('data', data); })
        .catch(function (err) { return subscription.emit('error', err); });
    return subscription;
}
exports.graphSubscription = graphSubscription;
